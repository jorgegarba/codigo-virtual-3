{"version":3,"sources":["modules/pos/components/PosHeader.js","modules/pos/components/PosNavigation.js","context/pos/posContext.js","modules/pos/components/PosMesa.js","utils/variables.js","services/mesas.js","modules/pos/components/PosMesas.js","services/categorias.js","modules/pos/components/PosCategoria.js","modules/pos/components/PosCategorias.js","context/pos/posReducer.js","context/pos/posState.js","modules/pos/components/PosPlato.js","services/platos.js","modules/pos/components/PosPlatos.js","modules/pos/components/PosComandaItem.js","modules/pos/components/PosComandaLista.js","modules/pos/components/PosComanda.js","modules/pos/screens/PosScreen.js","App.js","serviceWorker.js","index.js"],"names":["PosHeader","className","src","alt","type","placeholder","PosNavigation","PosContext","createContext","PosMesa","objMesa","useContext","global_mesa_id","setMesaActual","URL_BACKEND","getMesas","a","fetch","response","json","PosMesas","useState","mesas","setMesas","useEffect","then","mesasArray","map","key","id","getCategorias","PosCategoria","objCategoria","global_categoria_id","setCategoriaActual","onClick","name","PosCategorias","categorias","setCategorias","categoriasArray","PosReducer","state","action","payload","global_pedidos","mesa_id","platos","plato_id","cant","precio","plato_pre","nombre","plato_nom","PosState","props","useReducer","dispatch","Provider","value","sumarPedido","accion","price","pedidoMesaActual","find","objPedido","objPlato","console","log","globalPedidosNuevo","forEach","push","children","PosPlato","photo","getPlatosPorCategoria","status","PosPlatos","platosPorCategoria","setPlatosPorCategoria","item","catch","error","PosComandaItem","PosComandaLista","PosComanda","setObjMesa","mesa","number","PosScreen","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c4785505.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst PosHeader = () => {\r\n  return (\r\n    <header className=\"header\">\r\n      <div className=\"header__logo\">\r\n        <img src=\"assets/img/logo.svg\" alt=\"\" />\r\n      </div>\r\n      <div className=\"header__buscador\">\r\n        <img src=\"assets/img/search.svg\" alt=\"\" />\r\n        <input\r\n          type=\"text\"\r\n          className=\"header__input\"\r\n          placeholder=\"Busca un tÃ©rmino\"\r\n        />\r\n      </div>\r\n      <div className=\"header__usuario\">\r\n        <img src=\"https://randomuser.me/api/portraits/men/90.jpg\" alt=\"\" />\r\n        <span>Jorge Garnica</span>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default PosHeader;\r\n","import React from \"react\";\r\n\r\nconst PosNavigation = () => {\r\n  return (\r\n    <nav className=\"menu\">\r\n      <ul className=\"menu__lista\">\r\n        <li>\r\n          <img src=\"assets/img/plato_blanco.svg\" alt=\"\" />\r\n          <span>Bebidas</span>\r\n        </li>\r\n        <li>\r\n          <img src=\"assets/img/plato_blanco.svg\" alt=\"\" />\r\n          <span>Bebidas</span>\r\n        </li>\r\n        <li>\r\n          <img src=\"assets/img/plato_blanco.svg\" alt=\"\" />\r\n          <span>Bebidas</span>\r\n        </li>\r\n        <li>\r\n          <img src=\"assets/img/plato_blanco.svg\" alt=\"\" />\r\n          <span>Bebidas</span>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default PosNavigation;\r\n","import { createContext } from \"react\";\r\n// Siempre que se cree un context, se hace de la misma forma\r\n// excepto que cambia el nombre del context\r\nconst PosContext = createContext();\r\n\r\nexport default PosContext;\r\n","import React, { useContext } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport PosContext from \"../../../context/pos/posContext\";\r\nconst PosMesa = ({ objMesa }) => {\r\n  const { global_mesa_id, setMesaActual } = useContext(PosContext);\r\n\r\n  return (\r\n    // <li className=\"mesas__mesa active\">\r\n    <li\r\n      className={\r\n        global_mesa_id === +objMesa.id\r\n          ? \"mesas__mesa active\"\r\n          : \"mesas_mesa\"\r\n      }\r\n      onClick={() => setMesaActual(objMesa.id)}\r\n    >\r\n      <span className=\"mesas__titulo\">Mesa</span>\r\n      <span className=\"mesas__numero\">{objMesa.number}</span>\r\n    </li>\r\n  );\r\n};\r\n\r\nPosMesa.propTypes = {\r\n  objMesa: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default PosMesa;\r\n","export const URL_BACKEND = \"https://api-order-tpv.herokuapp.com/api\";\r\n","import { URL_BACKEND } from \"../utils/variables\";\r\n\r\n// {\r\n//   \"id\": 1,\r\n//   \"number\": \"01\",\r\n//   \"capacity\": 5,\r\n//   \"description\": \"Lorem Ipsum es \"\r\n// },\r\nexport const getMesas = async () => {\r\n  const response = await fetch(`${URL_BACKEND}/List_All_Tables/`);\r\n  const json = await response.json();\r\n  return json;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport PosMesa from \"./PosMesa\";\r\nimport { getMesas } from \"../../../services/mesas\";\r\n\r\nexport const PosMesas = () => {\r\n  const [mesas, setMesas] = useState([]);\r\n\r\n  useEffect(() => {\r\n    getMesas().then((mesasArray) => {\r\n      setMesas(mesasArray);\r\n    });\r\n  }, []);\r\n  return (\r\n    <div className=\"mesas\">\r\n      <ul className=\"mesas__lista\">\r\n        {mesas.map((objMesa) => (\r\n          <PosMesa objMesa={objMesa} key={objMesa.id} />\r\n        ))}\r\n      </ul>\r\n      <div className=\"mesas__info\"></div>\r\n    </div>\r\n  );\r\n};\r\n","import { URL_BACKEND } from \"../utils/variables\";\r\n// {\r\n//   \"id\": 1,\r\n//   \"name\": \"Cofee\",\r\n//   \"description\": \"El cafÃ© es la bebida que se obtiene a partir de los granos tostados y molidos de los frutos de la planta del cafÃ© (cafeto); es altamente estimulante por su contenido de cafeÃ­na,1â una sustancia psicoactiva. Este producto es uno de los mÃ¡s comercializados del mundo y una de las tres bebidas1â mÃ¡s consumidas del mundo (junto con el agua y el tÃ©). Suele tomarse durante el desayuno, despuÃ©s de Ã©ste o incluso como Ãºnico desayuno, aunque tambiÃ©n se suele tomar en la merienda, o despuÃ©s del almuerzo o cena para entablar conversaciones o solo por costumbre. Es una de las bebidas sin alcohol mÃ¡s socializadoras en muchos paÃ­ses. El gusto por el cafÃ© no es espontÃ¡neo, sino que debe cultivarse, puesto que su sabor es fuerte y amargo.\",\r\n//   \"photo\": \"https://api-order-tpv.herokuapp.com/media/Plate/cofee.jpg\",\r\n//   \"state\": true\r\n// },\r\nexport const getCategorias = async () => {\r\n  const response = await fetch(`${URL_BACKEND}/List_All_Category/`);\r\n  const json = await response.json();\r\n  return json;\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport PosContext from \"../../../context/pos/posContext\";\r\n// {\r\n//   \"id\": 1,\r\n//   \"name\": \"Cofee\",\r\n//   \"description\": \"El cafÃ© es la bebida que se obtiene a partir de los granos tostados y molidos de los frutos de la planta del cafÃ© (cafeto); es altamente estimulante por su contenido de cafeÃ­na,1â una sustancia psicoactiva. Este producto es uno de los mÃ¡s comercializados del mundo y una de las tres bebidas1â mÃ¡s consumidas del mundo (junto con el agua y el tÃ©). Suele tomarse durante el desayuno, despuÃ©s de Ã©ste o incluso como Ãºnico desayuno, aunque tambiÃ©n se suele tomar en la merienda, o despuÃ©s del almuerzo o cena para entablar conversaciones o solo por costumbre. Es una de las bebidas sin alcohol mÃ¡s socializadoras en muchos paÃ­ses. El gusto por el cafÃ© no es espontÃ¡neo, sino que debe cultivarse, puesto que su sabor es fuerte y amargo.\",\r\n//   \"photo\": \"https://api-order-tpv.herokuapp.com/media/Plate/cofee.jpg\",\r\n//   \"state\": true\r\n// },\r\nconst PosCategoria = ({ objCategoria }) => {\r\n  const { global_categoria_id, setCategoriaActual } = useContext(PosContext);\r\n  return (\r\n    <button\r\n      className={\r\n        global_categoria_id === +objCategoria.id\r\n          ? \"btn btn-outline-primary active\"\r\n          : \"btn btn-outline-primary\"\r\n      }\r\n      onClick={() => setCategoriaActual(objCategoria.id)}\r\n    >\r\n      {objCategoria.name}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default PosCategoria;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { getCategorias } from \"../../../services/categorias\";\r\nimport PosCategoria from \"./PosCategoria\";\r\n// {\r\n//   \"id\": 1,\r\n//   \"name\": \"Cofee\",\r\n//   \"description\": \"El cafÃ© es la bebida que se obtiene a partir de los granos tostados y molidos de los frutos de la planta del cafÃ© (cafeto); es altamente estimulante por su contenido de cafeÃ­na,1â una sustancia psicoactiva. Este producto es uno de los mÃ¡s comercializados del mundo y una de las tres bebidas1â mÃ¡s consumidas del mundo (junto con el agua y el tÃ©). Suele tomarse durante el desayuno, despuÃ©s de Ã©ste o incluso como Ãºnico desayuno, aunque tambiÃ©n se suele tomar en la merienda, o despuÃ©s del almuerzo o cena para entablar conversaciones o solo por costumbre. Es una de las bebidas sin alcohol mÃ¡s socializadoras en muchos paÃ­ses. El gusto por el cafÃ© no es espontÃ¡neo, sino que debe cultivarse, puesto que su sabor es fuerte y amargo.\",\r\n//   \"photo\": \"https://api-order-tpv.herokuapp.com/media/Plate/cofee.jpg\",\r\n//   \"state\": true\r\n// },\r\nconst PosCategorias = () => {\r\n  const [categorias, setCategorias] = useState([]);\r\n  useEffect(() => {\r\n    getCategorias().then((categoriasArray) => setCategorias(categoriasArray));\r\n  }, []);\r\n  return (\r\n    <div className=\"carta__categorias\">\r\n      {categorias.map((objCategoria) => (\r\n        <PosCategoria key={objCategoria.id} objCategoria={objCategoria} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PosCategorias;\r\n","const PosReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CAMBIAR_MESA_ACTUAL\":\r\n      // el valor que retorne, serÃ¡ el nuevo STATE\r\n      return {\r\n        ...state,\r\n        global_mesa_id: +action.payload,\r\n      };\r\n    case \"CAMBIAR_CATEGORIA_ACTUAL\":\r\n      // el valor que retorne, serÃ¡ el nuevo STATE\r\n      return {\r\n        ...state,\r\n        global_categoria_id: +action.payload,\r\n      };\r\n    case \"AGREGAR_PEDIDO\":\r\n      return {\r\n        ...state,\r\n        global_pedidos: [\r\n          ...state.global_pedidos,\r\n          {\r\n            mesa_id: state.global_mesa_id,\r\n            platos: [\r\n              {\r\n                plato_id: action.payload.plato_id,\r\n                cant: 1,\r\n                precio: action.payload.plato_pre,\r\n                nombre: action.payload.plato_nom,\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n      };\r\n    case \"AGREGAR_CANTIDAD_PLATO_PEDIDO\":\r\n      return {\r\n        ...state,\r\n        global_pedidos: [...action.payload],\r\n        // global_pedidos: 2,\r\n      };\r\n    case \"AGREGAR_PLATO_PEDIDO\":\r\n      return {\r\n        ...state,\r\n        global_pedidos: [...action.payload],\r\n        // global_pedidos: 1,\r\n      };\r\n    default:\r\n      return { ...state };\r\n  }\r\n};\r\n\r\nexport default PosReducer;\r\n","import React, { useReducer } from \"react\";\r\n\r\nimport PosReducer from \"./posReducer\";\r\nimport PosContext from \"./posContext\";\r\n\r\nconst PosState = (props) => {\r\n  const estadoInicial = {\r\n    global_mesa_id: null,\r\n    global_categoria_id: 0,\r\n    global_pedidos: [],\r\n  };\r\n  const [state, dispatch] = useReducer(PosReducer, estadoInicial);\r\n  const setMesaActual = (id) => {\r\n    dispatch({\r\n      type: \"CAMBIAR_MESA_ACTUAL\",\r\n      payload: id,\r\n    });\r\n  };\r\n  const setCategoriaActual = (id) => {\r\n    dispatch({\r\n      type: \"CAMBIAR_CATEGORIA_ACTUAL\",\r\n      payload: id,\r\n    });\r\n  };\r\n  /**\r\n   * objPedido\r\n   * {\r\n   *  mesa_id:5,\r\n   *  platos:[\r\n   *    {\r\n   *      plato_id:1,\r\n   *      cant: 3,\r\n   *      precio: 75.00,\r\n   *      nombre:\r\n   *    },\r\n   *    {\r\n   *      plato_id:5,\r\n   *      cant: 1,\r\n   *      precio: 10.00\r\n   *      nombre:\r\n   *    }\r\n   *  ]\r\n   * }\r\n   */\r\n  const sumarPedido = (\r\n    accion,\r\n    { id: plato_id, price: plato_pre, name: plato_nom }\r\n  ) => {\r\n    if (!state.global_mesa_id) {\r\n      return;\r\n    }\r\n    const pedidoMesaActual = state.global_pedidos.find(\r\n      (objPedido) => objPedido.mesa_id === state.global_mesa_id\r\n    );\r\n    if (pedidoMesaActual) {\r\n      let platoPedidoMesaActual = pedidoMesaActual.platos.find(\r\n        (objPlato) => +objPlato.plato_id === +plato_id\r\n      );\r\n      if (platoPedidoMesaActual) {\r\n        console.log(\"encontramos un plato previo\");\r\n\r\n        // AGREGAR_CANTIDAD_PLATO_PEDIDO\r\n\r\n        const globalPedidosNuevo = [\r\n          ...state.global_pedidos.map((objPedido) => {\r\n            if (+objPedido.mesa_id === +state.global_mesa_id) {\r\n              objPedido.platos.forEach((objPlato) => {\r\n                if (+objPlato.plato_id === +plato_id) {\r\n                  objPlato.precio =\r\n                    (objPlato.precio / objPlato.cant) * (objPlato.cant + 1);\r\n                  objPlato.cant = objPlato.cant + 1;\r\n                }\r\n              });\r\n              return objPedido;\r\n            }\r\n            return objPedido;\r\n          }),\r\n        ];\r\n\r\n        dispatch({\r\n          type:\r\n            accion === \"sumar\"\r\n              ? \"AGREGAR_CANTIDAD_PLATO_PEDIDO\"\r\n              : \"RESTAR_CANTIDAD_PLATO_PEDIDO\",\r\n          payload: globalPedidosNuevo,\r\n        });\r\n        return;\r\n      } else {\r\n        // AGREGAR_PLATO_PEDIDO\r\n\r\n        const globalPedidosNuevo = [\r\n          ...state.global_pedidos.map((objPedido) => {\r\n            if (+objPedido.mesa_id === +state.global_mesa_id) {\r\n              objPedido.platos.push({\r\n                plato_id: +plato_id,\r\n                cant: 1,\r\n                precio: +plato_pre,\r\n                nombre: plato_nom,\r\n              });\r\n              return objPedido;\r\n            }\r\n            return objPedido;\r\n          }),\r\n        ];\r\n        dispatch({\r\n          type: \"AGREGAR_PLATO_PEDIDO\",\r\n          payload: globalPedidosNuevo,\r\n        });\r\n      }\r\n    } else {\r\n      dispatch({\r\n        type: \"AGREGAR_PEDIDO\",\r\n        payload: {\r\n          plato_id,\r\n          plato_pre,\r\n          plato_nom\r\n        },\r\n      });\r\n    }\r\n  };\r\n  // const restarPedido = (plato_id) => {};\r\n  return (\r\n    <PosContext.Provider\r\n      value={{\r\n        global_mesa_id: state.global_mesa_id,\r\n        global_categoria_id: state.global_categoria_id,\r\n        global_pedidos: state.global_pedidos,\r\n        setMesaActual,\r\n        setCategoriaActual,\r\n        sumarPedido,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </PosContext.Provider>\r\n  );\r\n};\r\n\r\nexport default PosState;\r\n","import React, { useContext } from \"react\";\r\nimport PosContext from \"../../../context/pos/posContext\";\r\n\r\nconst PosPlato = ({ objPlato }) => {\r\n  const { sumarPedido } = useContext(PosContext);\r\n  return (\r\n    <div className=\"carta__plato\">\r\n      <img src={objPlato.photo} alt=\"\" />\r\n      <h4 className=\"carta__titulo\">{objPlato.name}</h4>\r\n      <span className=\"carta__precio\">S/ {objPlato.price}</span>\r\n      <div className=\"carta__botones\">\r\n        <button className=\"btn btn-outline-primary btn-restar\">-1</button>\r\n        <button\r\n          className=\"btn btn-outline-primary btn-sumar\"\r\n          onClick={() => {\r\n            sumarPedido(\"sumar\", objPlato);\r\n          }}\r\n        >\r\n          +1\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PosPlato;\r\n","import { URL_BACKEND } from \"../utils/variables\";\r\n\r\nexport const getPlatos = async () => {\r\n  const response = await fetch(`${URL_BACKEND}/platos`);\r\n  const json = await response.json();\r\n  return json;\r\n};\r\n\r\n/**\r\n *\r\n * @param {*} id de categoria\r\n */\r\nexport const getPlatosPorCategoria = async (id) => {\r\n  const response = await fetch(`${URL_BACKEND}/Category_Item_id/${id}`);\r\n  if (response.status === 404) {\r\n    throw \"404\";\r\n  }\r\n  const json = await response.json();\r\n  return json;\r\n};\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport PosPlato from \"./PosPlato\";\r\nimport { getPlatosPorCategoria } from \"../../../services/platos\";\r\nimport PosContext from \"../../../context/pos/posContext\";\r\n\r\n/**\r\n * calories: 30\r\n    category: 2\r\n    description: \"Inca Kola es una bebida gaseosa peruana. Aunque es consumida principalmente en el PerÃº, tambiÃ©n es comercializada en los Estados Unidos, Argentina, Ecuador, Chile y otras partes del mundo. Tiene un sabor dulce y un color amarillo-dorado\"\r\n    id: 3\r\n    ingredients: \"\"\r\n    name: \"Inka Kola\"\r\n    photo: \"https://api-order-tpv.herokuapp.com/media/item/inca-kola-calada_34.png\"\r\n    price: \"4.50\"\r\n    state: true\r\n */\r\nconst PosPlatos = () => {\r\n  const [platosPorCategoria, setPlatosPorCategoria] = useState([]);\r\n  const { global_categoria_id } = useContext(PosContext);\r\n\r\n  useEffect(() => {\r\n    getPlatosPorCategoria(global_categoria_id)\r\n      .then(({ item }) => {\r\n        setPlatosPorCategoria(item);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [global_categoria_id]);\r\n\r\n  return global_categoria_id === 0 ? (\r\n    <span>Seleccione una categorÃ­a</span>\r\n  ) : (\r\n    <div className=\"carta__platos\">\r\n      {platosPorCategoria.map((objPlato) => (\r\n        <PosPlato objPlato={objPlato} key={objPlato.id} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PosPlatos;\r\n","import React from \"react\";\r\n\r\nconst PosComandaItem = ({ objPlato }) => {\r\n  return (\r\n    <li className=\"comanda__item\">\r\n      <p className=\"comanda__nombre\">\r\n        <span>\r\n          <strong>{objPlato.nombre}</strong>\r\n        </span>\r\n        <span>Precio: S/ {objPlato.precio / objPlato.cant}</span>\r\n      </p>\r\n      <p className=\"comanda__cantidad\">{objPlato.cant}</p>\r\n      <p className=\"comanda__precio\">\r\n        <strong>S/ {objPlato.precio}</strong>\r\n      </p>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default PosComandaItem;\r\n","import React from \"react\";\r\nimport PosComandaItem from \"./PosComandaItem\";\r\n\r\nconst PosComandaLista = ({ pedidoMesaActual }) => {\r\n  return (\r\n    <ul className=\"comanda__lista\">\r\n      {pedidoMesaActual.platos.map((objPlato) => (\r\n        <PosComandaItem\r\n          objPlato={objPlato}\r\n          key={pedidoMesaActual.mesa_id + \"\" + objPlato.plato_id}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default PosComandaLista;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport PosComandaLista from \"./PosComandaLista\";\r\nimport { getMesas } from \"../../../services/mesas\";\r\nimport PosContext from \"../../../context/pos/posContext\";\r\n\r\nexport const PosComanda = () => {\r\n  const [objMesa, setObjMesa] = useState({});\r\n  const { global_mesa_id, global_pedidos } = useContext(PosContext);\r\n  useEffect(() => {\r\n    getMesas().then((mesas) => {\r\n      setObjMesa(mesas.find((mesa) => +mesa.id === +global_mesa_id));\r\n    });\r\n  });\r\n\r\n  const pedidoMesaActual = global_pedidos.find(\r\n    (objPedido) => objPedido.mesa_id === global_mesa_id\r\n  );\r\n\r\n  return (\r\n    <div className=\"comanda\">\r\n      <h4 className=\"comanda__mesa\">\r\n        Mesa: {+objMesa?.number || \"Seleccione una mesa\"}\r\n      </h4>\r\n      <p className=\"comanda__usuario\">Daniel De La Cruz</p>\r\n      <hr />\r\n      {pedidoMesaActual ? (\r\n        <>\r\n          <PosComandaLista pedidoMesaActual={pedidoMesaActual} />\r\n          <button className=\"btn btn-success\">PAGAR</button>\r\n        </>\r\n      ) : (\r\n        <span>Mesa libre</span>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport PosHeader from \"../components/PosHeader\";\r\nimport PosNavigation from \"../components/PosNavigation\";\r\nimport { PosMesas } from \"../components/PosMesas\";\r\nimport PosCategorias from \"../components/PosCategorias\";\r\nimport PosState from \"../../../context/pos/posState\";\r\nimport PosPlatos from \"../components/PosPlatos\";\r\nimport { PosComanda } from \"../components/PosComanda\";\r\n\r\nconst PosScreen = () => {\r\n  return (\r\n    <PosState>\r\n      <PosHeader />\r\n      <main className=\"container\">\r\n        <PosNavigation />\r\n        <section className=\"tabla\">\r\n          <PosMesas />\r\n          <div className=\"pedido\">\r\n            <div className=\"carta\">\r\n              <PosCategorias />\r\n              <PosPlatos />\r\n            </div>\r\n            <div className=\"boleta\">\r\n              <h3>Pedido</h3>\r\n              <PosComanda />\r\n            </div>\r\n          </div>\r\n        </section>\r\n      </main>\r\n    </PosState>\r\n  );\r\n};\r\n\r\nexport default PosScreen;\r\n","import React from \"react\";\n\nimport RouterMain from \"./routers/RouterMain\";\nimport PosScreen from \"./modules/pos/screens/PosScreen\";\n\nconst App = () => {\n  // return <RouterMain />;\n  return <PosScreen />;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}